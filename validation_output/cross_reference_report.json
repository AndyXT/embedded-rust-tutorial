{
  "summary": {
    "total_anchors": 222,
    "total_links": 14,
    "valid_links": 14,
    "broken_links_count": 0,
    "orphaned_anchors_count": 135,
    "link_success_rate": 1.0
  },
  "broken_links": [],
  "orphaned_anchors": [
    {
      "id": "memory-and-pointers",
      "title": "Memory and Pointers",
      "line_number": 49,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "functions-and-control-flow",
      "title": "Functions and Control Flow",
      "line_number": 61,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "crypto-specific-patterns",
      "title": "Crypto-Specific Patterns",
      "line_number": 81,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "common-embedded-patterns",
      "title": "Common Embedded Patterns",
      "line_number": 90,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "quick-syntax-reference",
      "title": "Quick Syntax Reference",
      "line_number": 100,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "embedded-specific-quick-reference",
      "title": "Embedded-Specific Quick Reference",
      "line_number": 160,
      "section_level": 3,
      "parent_section": "Quick Reference: C to Rust Cheat Sheet"
    },
    {
      "id": "xilinx-ultrascale-with-cortex-r5-setup",
      "title": "Xilinx Ultrascale+ with Cortex-R5 Setup",
      "line_number": 208,
      "section_level": 3,
      "parent_section": "Setting Up Your Environment"
    },
    {
      "id": "xilinx-ultrascale-configuration",
      "title": "Xilinx Ultrascale+ Configuration",
      "line_number": 281,
      "section_level": 3,
      "parent_section": "For static collections"
    },
    {
      "id": "xilinx-specific-cargotoml",
      "title": "Xilinx-Specific Cargo.toml",
      "line_number": 336,
      "section_level": 3,
      "parent_section": "target = \"armv7r-none-eabi\""
    },
    {
      "id": "project-structure-fundamentals",
      "title": "Project Structure Fundamentals",
      "line_number": 386,
      "section_level": 3,
      "parent_section": "Project Structure and Organization for Embedded Cryptography"
    },
    {
      "id": "binary-crates-vs-library-crates-for-embedded-cryptography",
      "title": "Binary Crates vs Library Crates for Embedded Cryptography",
      "line_number": 388,
      "section_level": 4,
      "parent_section": "Project Structure Fundamentals"
    },
    {
      "id": "when-to-use-each-approach",
      "title": "When to Use Each Approach",
      "line_number": 467,
      "section_level": 4,
      "parent_section": "Project Structure Fundamentals"
    },
    {
      "id": "module-system-deep-dive",
      "title": "Module System Deep Dive",
      "line_number": 497,
      "section_level": 3,
      "parent_section": "Project Structure and Organization for Embedded Cryptography"
    },
    {
      "id": "module-organization-patterns",
      "title": "Module Organization Patterns",
      "line_number": 499,
      "section_level": 4,
      "parent_section": "Module System Deep Dive"
    },
    {
      "id": "structuring-cryptographic-algorithms-across-modules",
      "title": "Structuring Cryptographic Algorithms Across Modules",
      "line_number": 563,
      "section_level": 4,
      "parent_section": "Module System Deep Dive"
    },
    {
      "id": "detailed-module-organization-example",
      "title": "Detailed Module Organization Example",
      "line_number": 605,
      "section_level": 4,
      "parent_section": "Module System Deep Dive"
    },
    {
      "id": "visibility-rules-and-pub-usage-for-crypto-apis",
      "title": "Visibility Rules and `pub` Usage for Crypto APIs",
      "line_number": 659,
      "section_level": 3,
      "parent_section": "Project Structure and Organization for Embedded Cryptography"
    },
    {
      "id": "visibility-levels",
      "title": "Visibility Levels",
      "line_number": 663,
      "section_level": 4,
      "parent_section": "Visibility Rules and `pub` Usage for Crypto APIs"
    },
    {
      "id": "security-focused-visibility-patterns",
      "title": "Security-Focused Visibility Patterns",
      "line_number": 731,
      "section_level": 4,
      "parent_section": "Visibility Rules and `pub` Usage for Crypto APIs"
    },
    {
      "id": "path-resolution-and-use-statements-for-embedded-projects",
      "title": "Path Resolution and Use Statements for Embedded Projects",
      "line_number": 785,
      "section_level": 3,
      "parent_section": "Project Structure and Organization for Embedded Cryptography"
    },
    {
      "id": "absolute-vs-relative-paths",
      "title": "Absolute vs Relative Paths",
      "line_number": 789,
      "section_level": 4,
      "parent_section": "Path Resolution and Use Statements for Embedded Projects"
    },
    {
      "id": "use-statement-patterns-for-crypto-libraries",
      "title": "Use Statement Patterns for Crypto Libraries",
      "line_number": 815,
      "section_level": 4,
      "parent_section": "Path Resolution and Use Statements for Embedded Projects"
    },
    {
      "id": "advanced-use-patterns-for-large-crypto-projects",
      "title": "Advanced Use Patterns for Large Crypto Projects",
      "line_number": 880,
      "section_level": 4,
      "parent_section": "Path Resolution and Use Statements for Embedded Projects"
    },
    {
      "id": "build-configuration",
      "title": "Build Configuration",
      "line_number": 927,
      "section_level": 3,
      "parent_section": "Project Structure and Organization for Embedded Cryptography"
    },
    {
      "id": "comprehensive-buildrs-usage-for-embedded-projects",
      "title": "Comprehensive `build.rs` Usage for Embedded Projects",
      "line_number": 929,
      "section_level": 4,
      "parent_section": "Build Configuration"
    },
    {
      "id": "custom-build-scripts-for-cryptographic-code-generation",
      "title": "Custom Build Scripts for Cryptographic Code Generation",
      "line_number": 3121,
      "section_level": 4,
      "parent_section": "Build Configuration"
    },
    {
      "id": "conditional-compilation-for-different-mcu-targets",
      "title": "Conditional Compilation for Different MCU Targets",
      "line_number": 3224,
      "section_level": 4,
      "parent_section": "Build Configuration"
    },
    {
      "id": "integration-with-hardware-specific-build-requirements",
      "title": "Integration with Hardware-Specific Build Requirements",
      "line_number": 3342,
      "section_level": 4,
      "parent_section": "src/crypto/mod.rs - Conditional compilation in action"
    },
    {
      "id": "no-std-specific-considerations",
      "title": "No-std Specific Considerations",
      "line_number": 3445,
      "section_level": 3,
      "parent_section": "src/crypto/mod.rs - Conditional compilation in action"
    },
    {
      "id": "how-project-structure-differs-in-no-std-environments",
      "title": "How Project Structure Differs in No-std Environments",
      "line_number": 3447,
      "section_level": 4,
      "parent_section": "No-std Specific Considerations"
    },
    {
      "id": "organizing-code-when-std-library-is-unavailable",
      "title": "Organizing Code When std Library is Unavailable",
      "line_number": 3534,
      "section_level": 4,
      "parent_section": "No-std Specific Considerations"
    },
    {
      "id": "managing-dependencies-and-features-for-embedded-crypto",
      "title": "Managing Dependencies and Features for Embedded Crypto",
      "line_number": 3685,
      "section_level": 4,
      "parent_section": "No-std Specific Considerations"
    },
    {
      "id": "variables-and-mutability",
      "title": "Variables and Mutability",
      "line_number": 3996,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "memory-management-stack-vs-heap",
      "title": "Memory Management: Stack vs Heap",
      "line_number": 4023,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "function-pointers-vs-closures",
      "title": "Function Pointers vs Closures",
      "line_number": 4069,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "pointers-and-references",
      "title": "Pointers and References",
      "line_number": 4116,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "no-null-pointers-use-optiont",
      "title": "No Null Pointers - Use Option<T>",
      "line_number": 4159,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "arrays-and-slices",
      "title": "Arrays and Slices",
      "line_number": 4306,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "type-inference",
      "title": "Type Inference",
      "line_number": 4323,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "statements-vs-expressions",
      "title": "Statements vs Expressions",
      "line_number": 4336,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "core-concepts",
      "title": "Core Concepts",
      "line_number": 4340,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "the-unit-type",
      "title": "The Unit Type ()",
      "line_number": 4358,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "expression-types-and-return-behavior",
      "title": "Expression Types and Return Behavior",
      "line_number": 4374,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "practical-crypto-examples",
      "title": "Practical Crypto Examples",
      "line_number": 4430,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "key-differences-from-c",
      "title": "Key Differences from C",
      "line_number": 4476,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "practical-crypto-examples-with-expressions",
      "title": "Practical Crypto Examples with Expressions",
      "line_number": 4499,
      "section_level": 4,
      "parent_section": "Statements vs Expressions"
    },
    {
      "id": "memory-model-rust-vs-c",
      "title": "Memory Model: Rust vs C",
      "line_number": 4561,
      "section_level": 3,
      "parent_section": "Core Language Differences from C"
    },
    {
      "id": "c-memory-model",
      "title": "C Memory Model",
      "line_number": 4565,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "rust-memory-model",
      "title": "Rust Memory Model",
      "line_number": 4626,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "memory-layout-comparison",
      "title": "Memory Layout Comparison",
      "line_number": 4691,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "stack-and-ownership-flow",
      "title": "Stack and Ownership Flow",
      "line_number": 4711,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "stack-and-heap-allocation",
      "title": "Stack and Heap Allocation",
      "line_number": 4747,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "zero-copy-and-memory-safety",
      "title": "Zero-Copy and Memory Safety",
      "line_number": 4766,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "lifetime-visualization",
      "title": "Lifetime Visualization",
      "line_number": 4787,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "memory-safety-benefits-for-cryptography",
      "title": "Memory Safety Benefits for Cryptography",
      "line_number": 4896,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "memory-layout-and-alignment",
      "title": "Memory Layout and Alignment",
      "line_number": 4924,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "undefined-behavior-prevention",
      "title": "Undefined Behavior Prevention",
      "line_number": 4955,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "volatile-access-for-crypto-hardware",
      "title": "Volatile Access for Crypto Hardware",
      "line_number": 4976,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "memory-ordering-and-atomics",
      "title": "Memory Ordering and Atomics",
      "line_number": 5017,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "zero-copy-operations",
      "title": "Zero-Copy Operations",
      "line_number": 5056,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "static-memory-in-embedded",
      "title": "Static Memory in Embedded",
      "line_number": 5103,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "dma-safe-memory-for-crypto-operations",
      "title": "DMA-Safe Memory for Crypto Operations",
      "line_number": 5119,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "common-crypto-pitfalls-when-coming-from-c",
      "title": "Common Crypto Pitfalls When Coming from C",
      "line_number": 5158,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "memory-safety-in-cryptographic-context",
      "title": "Memory Safety in Cryptographic Context",
      "line_number": 5204,
      "section_level": 4,
      "parent_section": "Memory Model: Rust vs C"
    },
    {
      "id": "the-three-rules-of-ownership",
      "title": "The Three Rules of Ownership",
      "line_number": 5279,
      "section_level": 3,
      "parent_section": "Ownership and Memory Management"
    },
    {
      "id": "borrowing-references",
      "title": "Borrowing References",
      "line_number": 5306,
      "section_level": 3,
      "parent_section": "Ownership and Memory Management"
    },
    {
      "id": "lifetimes",
      "title": "Lifetimes",
      "line_number": 5329,
      "section_level": 3,
      "parent_section": "Ownership and Memory Management"
    },
    {
      "id": "interior-mutability",
      "title": "Interior Mutability",
      "line_number": 5386,
      "section_level": 3,
      "parent_section": "Ownership and Memory Management"
    },
    {
      "id": "the-result-type",
      "title": "The Result Type",
      "line_number": 5465,
      "section_level": 3,
      "parent_section": "Error Handling Without Exceptions"
    },
    {
      "id": "custom-error-types",
      "title": "Custom Error Types",
      "line_number": 5501,
      "section_level": 3,
      "parent_section": "Error Handling Without Exceptions"
    },
    {
      "id": "panic-handling-in-embedded",
      "title": "Panic Handling in Embedded",
      "line_number": 5538,
      "section_level": 3,
      "parent_section": "Error Handling Without Exceptions"
    },
    {
      "id": "heap-allocation-in-no-std",
      "title": "Heap Allocation in No-std",
      "line_number": 5585,
      "section_level": 3,
      "parent_section": "No-std Programming"
    },
    {
      "id": "xilinx-ultrascale-specific-hardware-integration",
      "title": "Xilinx Ultrascale+ Specific Hardware Integration",
      "line_number": 5624,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "interfacing-with-xilinx-crypto-accelerators",
      "title": "Interfacing with Xilinx Crypto Accelerators",
      "line_number": 5628,
      "section_level": 4,
      "parent_section": "Xilinx Ultrascale+ Specific Hardware Integration"
    },
    {
      "id": "using-xilinx-bsp-libraries-via-ffi",
      "title": "Using Xilinx BSP Libraries via FFI",
      "line_number": 5991,
      "section_level": 4,
      "parent_section": "Xilinx Ultrascale+ Specific Hardware Integration"
    },
    {
      "id": "multi-core-programming-on-zynqmp",
      "title": "Multi-core Programming on ZynqMP",
      "line_number": 6150,
      "section_level": 4,
      "parent_section": "Xilinx Ultrascale+ Specific Hardware Integration"
    },
    {
      "id": "advanced-dma-operations-in-rust",
      "title": "Advanced DMA Operations in Rust",
      "line_number": 6454,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "advanced-interrupt-handling-patterns",
      "title": "Advanced Interrupt Handling Patterns",
      "line_number": 6740,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "real-time-constraints-and-timing-analysis",
      "title": "Real-Time Constraints and Timing Analysis",
      "line_number": 6965,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "general-embedded-hardware-patterns",
      "title": "General Embedded Hardware Patterns",
      "line_number": 7113,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "peripheral-access-crate-pac",
      "title": "Peripheral Access Crate (PAC)",
      "line_number": 7118,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "hardware-abstraction-layer-hal-for-crypto",
      "title": "Hardware Abstraction Layer (HAL) for Crypto",
      "line_number": 7140,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "embedded-hal-traits",
      "title": "Embedded-HAL Traits",
      "line_number": 7172,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "interrupt-handlers-for-crypto-operations",
      "title": "Interrupt Handlers for Crypto Operations",
      "line_number": 7198,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "secure-coding-patterns",
      "title": "Secure Coding Patterns",
      "line_number": 7280,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "dma-direct-memory-access",
      "title": "DMA (Direct Memory Access)",
      "line_number": 7380,
      "section_level": 3,
      "parent_section": "Working with Hardware"
    },
    {
      "id": "state-machines-for-cryptographic-protocols",
      "title": "State Machines for Cryptographic Protocols",
      "line_number": 7415,
      "section_level": 3,
      "parent_section": "Common Patterns and Best Practices"
    },
    {
      "id": "builder-pattern-for-crypto-configuration",
      "title": "Builder Pattern for Crypto Configuration",
      "line_number": 7532,
      "section_level": 3,
      "parent_section": "Common Patterns and Best Practices"
    },
    {
      "id": "side-channel-resistant-patterns",
      "title": "Side-Channel Resistant Patterns",
      "line_number": 7664,
      "section_level": 3,
      "parent_section": "Common Patterns and Best Practices"
    },
    {
      "id": "rtic-for-real-time-systems",
      "title": "RTIC for Real-Time Systems",
      "line_number": 7773,
      "section_level": 3,
      "parent_section": "Common Patterns and Best Practices"
    },
    {
      "id": "type-state-pattern-for-secure-apis",
      "title": "Type State Pattern for Secure APIs",
      "line_number": 7810,
      "section_level": 3,
      "parent_section": "Common Patterns and Best Practices"
    },
    {
      "id": "debugging-with-probe-rs",
      "title": "Debugging with probe-rs",
      "line_number": 7957,
      "section_level": 3,
      "parent_section": "Debugging and Tooling"
    },
    {
      "id": "rtt-real-time-transfer-for-printf-debugging",
      "title": "RTT (Real-Time Transfer) for Printf Debugging",
      "line_number": 7970,
      "section_level": 3,
      "parent_section": "Debug with GDB"
    },
    {
      "id": "panic-information",
      "title": "Panic Information",
      "line_number": 7990,
      "section_level": 3,
      "parent_section": "Debug with GDB"
    },
    {
      "id": "size-optimization",
      "title": "Size Optimization",
      "line_number": 8002,
      "section_level": 3,
      "parent_section": "Debug with GDB"
    },
    {
      "id": "memory-usage-analysis",
      "title": "Memory Usage Analysis",
      "line_number": 8014,
      "section_level": 3,
      "parent_section": "Cargo.toml"
    },
    {
      "id": "unit-testing-with-test-vectors",
      "title": "Unit Testing with Test Vectors",
      "line_number": 8026,
      "section_level": 3,
      "parent_section": "Testing Cryptographic Code"
    },
    {
      "id": "property-based-testing",
      "title": "Property-Based Testing",
      "line_number": 8097,
      "section_level": 3,
      "parent_section": "Testing Cryptographic Code"
    },
    {
      "id": "hardware-in-the-loop-testing",
      "title": "Hardware-in-the-Loop Testing",
      "line_number": 8131,
      "section_level": 3,
      "parent_section": "Testing Cryptographic Code"
    },
    {
      "id": "fuzzing-crypto-implementations",
      "title": "Fuzzing Crypto Implementations",
      "line_number": 8160,
      "section_level": 3,
      "parent_section": "Testing Cryptographic Code"
    },
    {
      "id": "general-embedded-rust",
      "title": "General Embedded Rust",
      "line_number": 8565,
      "section_level": 3,
      "parent_section": "Resources"
    },
    {
      "id": "cryptography-in-rust",
      "title": "Cryptography in Rust",
      "line_number": 8572,
      "section_level": 3,
      "parent_section": "Resources"
    },
    {
      "id": "security-resources",
      "title": "Security Resources",
      "line_number": 8579,
      "section_level": 3,
      "parent_section": "Resources"
    },
    {
      "id": "phase-1-foundation-weeks-1-2",
      "title": "Phase 1: Foundation (Weeks 1-2)",
      "line_number": 8589,
      "section_level": 3,
      "parent_section": "Migration Strategy: From C to Rust"
    },
    {
      "id": "week-1-environment-and-syntax",
      "title": "Week 1: Environment and Syntax",
      "line_number": 8593,
      "section_level": 4,
      "parent_section": "Phase 1: Foundation (Weeks 1-2)"
    },
    {
      "id": "week-2-ownership-and-memory-management",
      "title": "Week 2: Ownership and Memory Management",
      "line_number": 8627,
      "section_level": 4,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "phase-2-embedded-rust-basics-weeks-3-4",
      "title": "Phase 2: Embedded Rust Basics (Weeks 3-4)",
      "line_number": 8651,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "week-3-no-std-programming",
      "title": "Week 3: No-std Programming",
      "line_number": 8655,
      "section_level": 4,
      "parent_section": "Phase 2: Embedded Rust Basics (Weeks 3-4)"
    },
    {
      "id": "week-4-hardware-abstraction",
      "title": "Week 4: Hardware Abstraction",
      "line_number": 8678,
      "section_level": 4,
      "parent_section": "Phase 2: Embedded Rust Basics (Weeks 3-4)"
    },
    {
      "id": "phase-3-cryptography-implementation-weeks-5-8",
      "title": "Phase 3: Cryptography Implementation (Weeks 5-8)",
      "line_number": 8699,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "week-5-6-basic-crypto-algorithms",
      "title": "Week 5-6: Basic Crypto Algorithms",
      "line_number": 8703,
      "section_level": 4,
      "parent_section": "Phase 3: Cryptography Implementation (Weeks 5-8)"
    },
    {
      "id": "week-7-8-advanced-crypto-patterns",
      "title": "Week 7-8: Advanced Crypto Patterns",
      "line_number": 8732,
      "section_level": 4,
      "parent_section": "Phase 3: Cryptography Implementation (Weeks 5-8)"
    },
    {
      "id": "phase-4-xilinx-integration-weeks-9-10",
      "title": "Phase 4: Xilinx Integration (Weeks 9-10)",
      "line_number": 8759,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "week-9-xilinx-hardware-integration",
      "title": "Week 9: Xilinx Hardware Integration",
      "line_number": 8763,
      "section_level": 4,
      "parent_section": "Phase 4: Xilinx Integration (Weeks 9-10)"
    },
    {
      "id": "week-10-complete-integration",
      "title": "Week 10: Complete Integration",
      "line_number": 8805,
      "section_level": 4,
      "parent_section": "Phase 4: Xilinx Integration (Weeks 9-10)"
    },
    {
      "id": "phase-5-production-readiness-weeks-11-12",
      "title": "Phase 5: Production Readiness (Weeks 11-12)",
      "line_number": 8812,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "testing-strategy",
      "title": "Testing Strategy",
      "line_number": 8816,
      "section_level": 4,
      "parent_section": "Phase 5: Production Readiness (Weeks 11-12)"
    },
    {
      "id": "debugging-and-optimization",
      "title": "Debugging and Optimization",
      "line_number": 8848,
      "section_level": 4,
      "parent_section": "Phase 5: Production Readiness (Weeks 11-12)"
    },
    {
      "id": "migration-checklist",
      "title": "Migration Checklist",
      "line_number": 8870,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "before-starting-each-phase",
      "title": "Before Starting Each Phase:",
      "line_number": 8872,
      "section_level": 4,
      "parent_section": "Migration Checklist"
    },
    {
      "id": "phase-completion-criteria",
      "title": "Phase Completion Criteria:",
      "line_number": 8878,
      "section_level": 4,
      "parent_section": "Migration Checklist"
    },
    {
      "id": "common-pitfalls-and-solutions",
      "title": "Common Pitfalls and Solutions",
      "line_number": 8905,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "pitfall-1-fighting-the-borrow-checker",
      "title": "Pitfall 1: Fighting the Borrow Checker",
      "line_number": 8907,
      "section_level": 4,
      "parent_section": "Common Pitfalls and Solutions"
    },
    {
      "id": "pitfall-2-overusing-unsafe",
      "title": "Pitfall 2: Overusing `unsafe`",
      "line_number": 8922,
      "section_level": 4,
      "parent_section": "Common Pitfalls and Solutions"
    },
    {
      "id": "pitfall-3-ignoring-error-handling",
      "title": "Pitfall 3: Ignoring Error Handling",
      "line_number": 8940,
      "section_level": 4,
      "parent_section": "Common Pitfalls and Solutions"
    },
    {
      "id": "resources-for-each-phase",
      "title": "Resources for Each Phase",
      "line_number": 8958,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "phase-1-resources",
      "title": "Phase 1 Resources:",
      "line_number": 8960,
      "section_level": 4,
      "parent_section": "Resources for Each Phase"
    },
    {
      "id": "phase-2-resources",
      "title": "Phase 2 Resources:",
      "line_number": 8965,
      "section_level": 4,
      "parent_section": "Resources for Each Phase"
    },
    {
      "id": "phase-3-resources",
      "title": "Phase 3 Resources:",
      "line_number": 8970,
      "section_level": 4,
      "parent_section": "Resources for Each Phase"
    },
    {
      "id": "phase-4-resources",
      "title": "Phase 4 Resources:",
      "line_number": 8975,
      "section_level": 4,
      "parent_section": "Resources for Each Phase"
    },
    {
      "id": "phase-5-resources",
      "title": "Phase 5 Resources:",
      "line_number": 8980,
      "section_level": 4,
      "parent_section": "Resources for Each Phase"
    },
    {
      "id": "timeline-flexibility",
      "title": "Timeline Flexibility",
      "line_number": 8985,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "success-metrics",
      "title": "Success Metrics",
      "line_number": 8994,
      "section_level": 3,
      "parent_section": "Create simple programs to understand ownership"
    },
    {
      "id": "core-embedded-crates",
      "title": "Core Embedded Crates",
      "line_number": 9020,
      "section_level": 3,
      "parent_section": "Common Crates for Embedded"
    },
    {
      "id": "cryptography-crates-for-embedded",
      "title": "Cryptography Crates for Embedded",
      "line_number": 9032,
      "section_level": 3,
      "parent_section": "Common Crates for Embedded"
    }
  ],
  "link_statistics": {
    "total_links": 14,
    "internal_links": 14,
    "cross_references": 0,
    "navigation_links": 0,
    "direct_links": 0,
    "unique_targets": 14,
    "sections_with_links": 1
  },
  "section_connectivity": {
    "Table of Contents": [
      "Introduction: Why Rust for Embedded Cryptography",
      "Quick Reference: C to Rust Cheat Sheet",
      "Setting Up Your Environment",
      "Project Structure and Organization for Embedded Cryptography",
      "Core Language Differences from C",
      "Ownership and Memory Management",
      "Error Handling Without Exceptions",
      "No-std Programming",
      "Working with Hardware",
      "Common Patterns and Best Practices",
      "Debugging and Tooling",
      "Testing Cryptographic Code",
      "Real-World Example: Secure Communication Module",
      "Migration Strategy: From C to Rust"
    ]
  },
  "suggestions": []
}