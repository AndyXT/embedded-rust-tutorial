name: Build and Validate

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Build and validate the mdBook
  build-book:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup mdBook
      uses: peaceiris/actions-mdbook@v1
      with:
        mdbook-version: 'latest'
    
    - name: Build mdBook
      run: |
        echo "üìö Building mdBook..."
        mdbook build
        echo "‚úÖ mdBook built successfully"
    
    - name: Validate build output
      run: |
        # Check critical files exist
        required_files=(
          "book/index.html"
          "book/introduction.html"
          "book/print.html"
          "book/searchindex.js"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        # Check that chapters have been built
        required_dirs=(
          "book/core-concepts"
          "book/cryptography"
          "book/embedded-patterns"
          "book/migration"
          "book/quick-reference"
        )
        
        for dir in "${required_dirs[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing required directory: $dir"
            exit 1
          fi
        done
        
        echo "‚úÖ All required build outputs present"
    
    - name: Check for broken links
      run: |
        echo "üîó Checking for broken internal links..."
        # Simple check for broken internal links in HTML
        broken_links=0
        for file in $(find book -name "*.html" -type f); do
          # Extract internal links and check if files exist
          grep -oE 'href="[^"]*\.html"' "$file" | sed 's/href="//;s/"//' | while read -r link; do
            # Skip anchors and external links
            if [[ ! "$link" =~ ^http && ! "$link" =~ ^# ]]; then
              # Resolve relative links
              dir=$(dirname "$file")
              target="$dir/$link"
              target=$(realpath --relative-to=. "$target" 2>/dev/null || echo "$target")
              
              if [[ ! -f "$target" ]] && [[ ! -f "book/$link" ]]; then
                echo "‚ö†Ô∏è  Broken link in $file: $link"
                broken_links=$((broken_links + 1))
              fi
            fi
          done
        done
        
        if [ $broken_links -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $broken_links broken links (non-critical)"
        else
          echo "‚úÖ No broken internal links found"
        fi
    
    - name: Upload book artifact
      uses: actions/upload-artifact@v3
      with:
        name: mdbook-output
        path: book/