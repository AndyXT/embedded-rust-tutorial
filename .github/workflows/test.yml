name: Test and Validate

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Build and validate the mdBook
  validate-book:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup mdBook
      uses: peaceiris/actions-mdbook@v1
      with:
        mdbook-version: 'latest'
    
    - name: Build mdBook
      run: |
        echo "üìö Building mdBook..."
        mdbook build
        echo "‚úÖ mdBook built successfully"
    
    - name: Validate build output
      run: |
        # Check critical files exist
        required_files=(
          "book/index.html"
          "book/introduction.html"
          "book/print.html"
          "book/searchindex.js"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ All required build outputs present"
    
    - name: Upload book artifact
      uses: actions/upload-artifact@v3
      with:
        name: mdbook-output
        path: book/

  # Test Rust code compilation
  test-rust:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable]
    steps:
    - uses: actions/checkout@v4
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Add embedded targets
      run: |
        rustup target add thumbv7em-none-eabihf
        rustup target add armv7r-none-eabi
    
    - name: Check formatting
      run: cargo fmt -- --check
      continue-on-error: true
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
      continue-on-error: true
    
    - name: Build project (std)
      run: |
        echo "üî® Building project with std..."
        cargo build --release
        echo "‚úÖ Build completed"
    
    - name: Build project (no_std)
      run: |
        echo "üî® Building for embedded targets..."
        cargo build --release --target thumbv7em-none-eabihf --features embedded
        echo "‚úÖ Embedded build completed"
    
    - name: Run tests
      run: |
        echo "üß™ Running tests..."
        cargo test --release
        echo "‚úÖ Tests completed"

  # Test example code validation
  test-examples:
    runs-on: ubuntu-latest
    needs: [test-rust]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: thumbv7em-none-eabihf, armv7r-none-eabi
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-examples-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 markdown
    
    - name: Build example tester
      run: |
        echo "üî® Building example tester..."
        cargo build --bin rust_example_tester --release
        echo "‚úÖ Example tester built"
    
    - name: Test code examples
      run: |
        echo "üß™ Testing code examples in documentation..."
        # Test a few key files
        for file in src/introduction.md src/core-concepts/ownership.md src/cryptography/secure-patterns.md; do
          if [ -f "$file" ]; then
            echo "Testing $file..."
            timeout 60 ./target/release/rust_example_tester "$file" || true
          fi
        done
        echo "‚úÖ Example testing completed"
    
    - name: Run Python validation
      run: |
        if [ -f "validate_tutorial.py" ]; then
          echo "üêç Running Python validation..."
          python validate_tutorial.py src/introduction.md || true
          echo "‚úÖ Python validation completed"
        fi

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [validate-book, test-rust, test-examples]
    if: always()
    steps:
    - name: Summary
      run: |
        echo "## üìä CI/CD Summary"
        echo ""
        echo "### Job Results:"
        echo "- Book Validation: ${{ needs.validate-book.result }}"
        echo "- Rust Tests: ${{ needs.test-rust.result }}"
        echo "- Example Tests: ${{ needs.test-examples.result }}"
        echo ""
        if [[ "${{ needs.validate-book.result }}" == "success" && \
              "${{ needs.test-rust.result }}" == "success" && \
              "${{ needs.test-examples.result }}" == "success" ]]; then
          echo "‚úÖ All checks passed!"
        else
          echo "‚ùå Some checks failed. Please review the logs above."
          exit 1
        fi